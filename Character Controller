using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Stride.Core.Mathematics;
using Stride.Input;
using Stride.Navigation;
using Stride.Physics;
using Stride.Engine;
using Stride.Physics.Shapes;


namespace New_game_2
{
    public class PlayerController : SyncScript
    {
        private Vector3 cameraRotation;
        public float MouseSpeed = 0.5f;
        public bool InvertY = false;
        public float MaxCamAngle = -50f;
        public float MinCamAngle = 50f;
        public Vector2 MaxCameraAngles;
        public Entity Camera;



        public Simulation simulation;
        public Entity selectedPrefab;
        public PhysicsComponent Collider;
        // Declared public member fields and properties will show in the game studio

        public override void Start()
        {
            MaxCameraAngles = new Vector2(MathUtil.DegreesToRadians(MaxCamAngle), MathUtil.DegreesToRadians(MinCamAngle));
            cameraRotation = Entity.Transform.RotationEulerXYZ;
            simulation = this.GetSimulation();

        }
        public override void Update()
        {
            Input.LockMousePosition();

            var mouseMovement = Input.MouseDelta * MouseSpeed;

            cameraRotation.Y += -mouseMovement.X;

            cameraRotation.X += InvertY ? -mouseMovement.Y : mouseMovement.Y;
            cameraRotation.X = MathUtil.Clamp(cameraRotation.X,MaxCameraAngles.X,MaxCameraAngles.Y);

            Entity.Transform.Rotation = Quaternion.RotationY(cameraRotation.Y);

            Camera.Transform.Rotation = Quaternion.RotationX(-cameraRotation.X);

         
            if (Input.IsKeyDown(Keys.E))
            {
                RaycastResult raycastResult = GetObject();

                if (GetObject().Succeeded)
                {
                    Move(GetObject().HitPrefab);
                }

            }
        }

        public RaycastResult GetObject()
        {
            var raycastStart = Entity.Transform.Position;
            var raycastEnd = raycastStart + Entity.Transform.WorldMatrix.Forward * 500; // 500 units in the forward direction

            if (simulation.Raycast(raycastStart, raycastEnd, out HitResult hitResult, CollisionFilterGroups.DefaultFilter, CollisionFilterGroupFlags.AllFilter))
            {
                return new RaycastResult { Succeeded = true, HitPrefab = hitResult.Collider.Entity };
            }
            return new RaycastResult { Succeeded = false, HitPrefab = null };

        }

        public void Move(Entity hitPrefab)
        {
           
            Vector3 prefabPosition = hitPrefab.Transform.Position;
            Entity.Transform.Position = prefabPosition;
        }

        public struct RaycastResult
        {
            public bool Succeeded;
            public Entity HitPrefab;

            public RaycastResult(bool suceeded, Entity hitPrefab)
            {
                Succeeded = suceeded;
                HitPrefab= hitPrefab;
            }

            public static RaycastResult Success(Entity HitPrefab)
            {
                return new RaycastResult(true, HitPrefab);
            }

            public static RaycastResult Failure()
            {
                return new RaycastResult(false, null);
            }
        }
    }
}
    

