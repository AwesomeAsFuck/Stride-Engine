using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SharpDX.MediaFoundation;
using SharpFont.PostScript;
using Stride.Core.Mathematics;
using Stride.Input;
using Stride.Navigation;
using Stride.Physics;

namespace New_game_2
{
    public class PlayerController : SyncScript
    {
         public Vector3 NormalSpeed;
         public Quaternion Rotation;
         private Entity Camera;
         private Vector2 mouseDelta;
   
 
 // Declared public member fields and properties will show in the game studio

         public override void Start()
     {
            Camera = Entity.GetParent();
            mouseDelta = Vector2.Zero;
    
        }
           public override void Update()
      {
         
         mouseDelta += new Vector2(mouseDelta.X, mouseDelta.Y) * 0.1f;

         var rotation = new Vector3(-mouseDelta.Y, -mouseDelta.X,0);

         Camera.Transform.Rotation = Quaternion.RotationYawPitchRoll(rotation.X,rotation.Y,rotation.Z);

         if (Input.IsKeyPressed(Keys.E)) 
       {  
                GetObject();
                RaycastResult raycastresult = GetObject();
                if (raycastresult.Succeeded)
                { 
                   Move(raycastresult.Collider)                
                }

       }
             public RaycastResult GetObject() 
            {
                var raycastStart = Camera.Transform.Position;
                var raycastEnd = raycastStart + Camera.Transform.Forward * 100; // 100 units in the forward direction
                if (simulation.Raycast(raycastStart, raycastEnd, out HitResult hitResult, CollisionFilterGroups.DefaultFilter, CollideWithGroup, CollideWithTriggers))
                {
                    return new RaycastResult { Succeeded = true, Collider = hitResult.Collider };
                }
                return RaycastResult.Empty;
        
            } 
            public  Move(Collider collider) 
            {
                Entity selectedPrefab = collider.Entity;
                Vector3 prefabPosition = selectedPrefab.Transform.Position;
                Entity.Transform.Position = prefabPosition;
            } 
    }
    }
}
